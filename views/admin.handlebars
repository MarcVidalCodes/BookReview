<!-- Main Content with Navigation -->
<div class="main-content">
    <header>
        <div class="logo">
            <i class="fas fa-book-reader"></i> 
            <h1>BookNerds</h1>
        </div>
        <nav>
            <ul>
                <li><a href="/" id="nav-home">Home</a></li>
                <li><a href="/my-reviews" id="nav-my-reviews">My Reviews</a></li>
                <li><a href="/search" id="nav-search">Search</a></li>
                <li><a href="/admin" id="nav-admin" class="active">Admin</a></li>
                <li><a href="/logout" id="logout">Logout</a></li>
            </ul>
        </nav>
    </header>

    <!-- Admin Controls Page -->
    <div id="admin-page">
        <h2>Admin Controls</h2>
        
        <!-- Admin Content - Will be shown only to admin users -->
        <div id="admin-content" style="display: none;">
            <div class="admin-tabs">
                <button class="admin-tab active" data-tab="users">Manage Users</button>
                <button class="admin-tab" data-tab="reviews">Manage Reviews</button>
            </div>
            
            <div id="admin-users" class="admin-tab-content">
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Username</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="users-table-body">
                        <!-- User rows will be inserted here -->
                        <tr><td colspan="4" class="loading">Loading users...</td></tr>
                    </tbody>
                </table>
            </div>
            
            <div id="admin-reviews" class="admin-tab-content" style="display: none;">
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>User</th>
                            <th>Book Title</th>
                            <th>Rating</th>
                            <th>Recommended</th>
                            <th>Review</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="reviews-table-body">
                        <!-- Review rows will be inserted here -->
                        <tr><td colspan="7" class="loading">Loading reviews...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Unauthorized Access Message - Will be shown to non-admin users -->
        <div id="unauthorized-page" style="display: none;">
            <div class="unauthorized-container">
                <i class="fas fa-exclamation-triangle"></i>
                <h2>UNAUTHORIZED ACCESS</h2>
                <p>You do not have permission to view this page. Only admin users can access this section.</p>
                <button id="back-to-home">Back to Home</button>
            </div>
        </div>
    </div>
</div>

<script type="module">
    import { isUserLoggedIn, getCurrentUser, isUserAdmin } from '/js/auth.js';
    
    document.addEventListener('DOMContentLoaded', () => {
        // Check authentication
        if (!isUserLoggedIn()) {
            window.location.href = '/';
            return;
        }
        
        const currentUser = getCurrentUser();
        console.log('Current user role:', currentUser?.role);
        
        // Check if user is admin (using a direct check on role property)
        if (currentUser && currentUser.role === 'admin') {
            // Show admin content for admin users
            document.getElementById('admin-content').style.display = 'block';
            document.getElementById('unauthorized-page').style.display = 'none';
            loadAdminContent();
        } else {
            // Show unauthorized message for non-admin users
            document.getElementById('admin-content').style.display = 'none';
            document.getElementById('unauthorized-page').style.display = 'block';
            
            document.getElementById('back-to-home').addEventListener('click', () => {
                window.location.href = '/';
            });
        }
        
        function loadAdminContent() {
            // Set up tab switching
            document.querySelectorAll('.admin-tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabId = tab.dataset.tab;
                    
                    // Update active tab
                    document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');
                    
                    // Show relevant content
                    document.querySelectorAll('.admin-tab-content').forEach(content => {
                        content.style.display = 'none';
                    });
                    document.getElementById(`admin-${tabId}`).style.display = 'block';
                    
                    // Load content based on tab
                    if (tabId === 'users') {
                        loadAdminUsers();
                    } else if (tabId === 'reviews') {
                        loadAdminReviews();
                    }
                });
            });
            
            // Load users by default
            loadAdminUsers();
        }

        function loadAdminUsers() {
            const tableBody = document.getElementById('users-table-body');
            tableBody.innerHTML = '<tr><td colspan="4" class="loading">Loading users...</td></tr>';
            
            // Get current user's credentials if they're an admin
            const userData = currentUser;
            let headers = {};
            
            if (userData && userData.role === 'admin' && userData.password) {
                // Use the current user's credentials for API calls
                const credentials = btoa(`${userData.username}:${userData.password}`);
                headers = {
                    'Authorization': `Basic ${credentials}`,
                    'Content-Type': 'application/json'
                };
            } else {
                tableBody.innerHTML = '<tr><td colspan="4" class="error">Admin authentication failed. Please log in again.</td></tr>';
                return;
            }
            
            fetch('/api/admin/users', {
                headers: headers
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                return response.json();
            })
            .then(users => {
                // Handle empty array
                if (users.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="4">No users found</td></tr>';
                    return;
                }
                
                tableBody.innerHTML = users.map(user => {
                    const isAdmin = user.role === 'admin';
                    const deleteBtn = isAdmin ? 
                        '' : 
                        `<button class="delete-btn delete-user" data-id="${user.id}">Delete</button>`;
                    const usernameClass = isAdmin ? 'admin-user' : '';
                    
                    return `
                        <tr>
                            <td>${user.id}</td>
                            <td class="${usernameClass}">${user.username}</td>
                            <td>${user.role}</td>
                            <td>${deleteBtn}</td>
                        </tr>
                    `;
                }).join('');
                
                // Add event listeners to delete buttons
                document.querySelectorAll('.delete-user').forEach(button => {
                    button.addEventListener('click', () => {
                        const userId = button.dataset.id;
                        if (confirm('Are you sure you want to delete this user? This will also delete all their reviews.')) {
                            deleteUser(userId);
                        }
                    });
                });
            })
            .catch(err => {
                console.error('Error loading users:', err);
                tableBody.innerHTML = `<tr><td colspan="4" class="error">Error loading users: ${err.message}</td></tr>`;
            });
        }

        function loadAdminReviews() {
            const tableBody = document.getElementById('reviews-table-body');
            tableBody.innerHTML = '<tr><td colspan="7" class="loading">Loading reviews...</td></tr>';
            
            // Get current user's credentials if they're an admin
            const userData = currentUser;
            let headers = {};
            
            if (userData && userData.role === 'admin' && userData.password) {
                // Use the current user's credentials for API calls
                const credentials = btoa(`${userData.username}:${userData.password}`);
                headers = {
                    'Authorization': `Basic ${credentials}`,
                    'Content-Type': 'application/json'
                };
            } else {
                tableBody.innerHTML = '<tr><td colspan="7" class="error">Admin authentication failed. Please log in again.</td></tr>';
                return;
            }
            
            fetch('/api/reviews', {
                headers: headers
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Request failed with status ${response.status}`);
                    }
                    return response.json();
                })
                .then(reviews => {
                    if (reviews.length === 0) {
                        tableBody.innerHTML = '<tr><td colspan="7">No reviews found</td></tr>';
                        return;
                    }
                    
                    tableBody.innerHTML = reviews.map(review => {
                        const recommendedText = review.recommended ? 
                            '<span class="recommended">Yes</span>' : 
                            '<span class="not-recommended">No</span>';
                        
                        return `
                            <tr>
                                <td>${review.id}</td>
                                <td>${review.username}</td>
                                <td>${review.bookTitle}</td>
                                <td>${review.rating}/10</td>
                                <td>${recommendedText}</td>
                                <td class="review-text">${review.reviewText}</td>
                                <td>
                                    <button class="delete-btn delete-review" data-id="${review.id}">Delete</button>
                                </td>
                            </tr>
                        `;
                    }).join('');
                    
                    // Add event listeners to delete buttons
                    document.querySelectorAll('.delete-review').forEach(button => {
                        button.addEventListener('click', () => {
                            const reviewId = button.dataset.id;
                            if (confirm('Are you sure you want to delete this review?')) {
                                deleteReview(reviewId);
                            }
                        });
                    });
                })
                .catch(err => {
                    console.error('Error loading reviews:', err);
                    tableBody.innerHTML = `<tr><td colspan="7" class="error">Error loading reviews: ${err.message}</td></tr>`;
                });
        }

        function deleteUser(userId) {
            // Get current user's credentials if they're an admin
            const userData = currentUser;
            let headers = {};
            
            if (userData && userData.role === 'admin' && userData.password) {
                // Use the current user's credentials for API calls
                const credentials = btoa(`${userData.username}:${userData.password}`);
                headers = {
                    'Authorization': `Basic ${credentials}`,
                    'Content-Type': 'application/json'
                };
            } else {
                // This shouldn't be reached due to UI restrictions, but just in case
                alert('Admin authentication failed. Please log in again.');
                return;
            }
            
            fetch(`/api/admin/users/${userId}`, {
                method: 'DELETE',
                headers: headers
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Failed to delete user (status: ${response.status})`);
                }
                alert('User deleted successfully!');
                loadAdminUsers(); // Reload users after deletion
            })
            .catch(err => {
                console.error('Error deleting user:', err);
                alert(`Failed to delete user: ${err.message}`);
            });
        }
        
        function deleteReview(reviewId) {
            // Get current user's credentials if they're an admin
            const userData = currentUser;
            let headers = {};
            
            if (userData && userData.role === 'admin' && userData.password) {
                // Use the current user's credentials for API calls
                const credentials = btoa(`${userData.username}:${userData.password}`);
                headers = {
                    'Authorization': `Basic ${credentials}`,
                    'Content-Type': 'application/json'
                };
            } else {
                // This shouldn't be reached due to UI restrictions, but just in case
                alert('Admin authentication failed. Please log in again.');
                return;
            }
            
            fetch(`/api/reviews/${reviewId}`, {
                method: 'DELETE',
                headers: headers
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Failed to delete review (status: ${response.status})`);
                }
                alert('Review deleted successfully!');
                loadAdminReviews(); // Reload reviews after deletion
            })
            .catch(err => {
                console.error('Error deleting review:', err);
                alert(`Failed to delete review: ${err.message}`);
            });
        }
    });
</script>